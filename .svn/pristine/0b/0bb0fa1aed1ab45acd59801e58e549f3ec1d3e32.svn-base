package com.example.smartlinklib;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import android.content.Context;
import android.net.DhcpInfo;
import android.net.wifi.WifiManager;
import android.text.format.Formatter;
import android.util.Log;
import android.widget.Toast;

public class SmartLinkManipulator {

	private String TAG = "HFdebug";

	private String ssid;
	private String pswd;
	private String broadCastIP;
	private String gateWay;
	private static SmartLinkManipulator me = null;
	private Set<String> successMacSet = new HashSet<String>();
	private int HEADER_COUNT = 200;
	private int HEADER_PACKAGE_DELAY_TIME = 10;
	private int HEADER_CAPACITY = 76;
	private ConnectCallBack callback;
	private int CONTENT_COUNT = 5;
	private int CONTENT_PACKAGE_DELAY_TIME = 50;
	private int CONTENT_CHECKSUM_BEFORE_DELAY_TIME = 100;
	private int CONTENT_GROUP_DELAY_TIME = 500;
	private final String RET_KEY = "smart_config";
	private ConfigUdpBroadcast mConfigBroadUdp;

	private int port = 49999;
	private byte receiveByte[] = new byte[512];

	public static final int DEVICE_COUNT_ONE = 1;
	public static final int DEVICE_COUNT_MULTIPLE = -1;

	public boolean isConnecting = false;

	private SmartLinkManipulator(Context ctx) {
		this.broadCastIP = getBroadCast(ctx);
		if (isConnecting) {
			isConnecting = false;
			mConfigBroadUdp.stopReceive();
		} else {
			mConfigBroadUdp = new ConfigUdpBroadcast();
		}
		mConfigBroadUdp.open();
	}

	public static SmartLinkManipulator getInstence(Context ctx) {
		if (me == null) {
			me = new SmartLinkManipulator(ctx);
		}
		return me;
	}

	public void setConnection(String ssid, String password) {
		Log.e(TAG, ssid + ":" + password);
		this.ssid = ssid;
		this.pswd = password;
	};

	Runnable findThread = new Runnable() {

		@Override
		public void run() {
			// TODO Auto-generated method stub
			try {
				Thread.sleep(10000);
			} catch (InterruptedException e) {
			}
			for (int i = 0; i < 20 && isConnecting; i++) {
				mConfigBroadUdp.sendFindCmd();
				try {Thread.sleep(1000);} catch (InterruptedException e) {}
			}
			if(isConnecting){
				if (successMacSet.size() <= 0)
					callback.onConnectTimeOut();
				else if(successMacSet.size() > 0) 
					callback.onConnectOk();
			}
			StopConnection();
		}
	};

	public void Startconnection(ConnectCallBack callback) {
		Log.e(TAG, "Startconnection");
		this.callback = callback;
		isConnecting = true;
		mConfigBroadUdp.receive();
		successMacSet.clear();
		new Thread(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				while (isConnecting) {
					connect();
				}
			}
		}).start();
		new Thread(findThread).start();
	}

	public void StopConnection() {
		if(me != null){
			isConnecting = false;
			mConfigBroadUdp.stopReceive();
			mConfigBroadUdp.close();
			me = null;
		}
	}

	// -----------------------------------------------------------------------

	// ------------------------------------------------------------------------

	public interface ConnectCallBack {
		void onConnect(ModuleInfo mi);
		void onConnectTimeOut();
		void onConnectOk();
	}

	// -----------------------------------------------------------------------------

	private String getBroadCast(Context ctx) {
		WifiManager cm = (WifiManager) ctx
				.getSystemService(Context.WIFI_SERVICE);
		if (cm != null) {
			DhcpInfo dhcpInfo = cm.getDhcpInfo();
			return Formatter.formatIpAddress(dhcpInfo.gateway | 0xff000000);
		}
		return null;
	}

	private void connect() {
		Log.e(TAG, "connect");
		int count = 1;
		byte[] header = this.getBytes(HEADER_CAPACITY);
		while (count <= HEADER_COUNT && isConnecting) {
			mConfigBroadUdp.send(header);
			try {
				Thread.sleep(HEADER_PACKAGE_DELAY_TIME);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			count++;
		}
		String pwd = pswd;
		int[] content = new int[pwd.length() + 2];

		content[0] = 89;
		int j = 1;
		for (int i = 0; i < pwd.length(); i++) {
			content[j] = pwd.charAt(i) + 76;
			j++;
		}
		content[content.length - 1] = 86;

		count = 1;
		while (count <= CONTENT_COUNT && isConnecting) {
			for (int i = 0; i < content.length; i++) {
				// JCTIP ver2 start end checksum send 3 time;
				int _count = 1;
				if (i == 0 || i == content.length - 1) {
					_count = 3;
				}
				int t = 1;
				while (t <= _count && isConnecting) {
					mConfigBroadUdp.send(getBytes(content[i]));
					if (i != content.length) {
						try {
							Thread.sleep(CONTENT_PACKAGE_DELAY_TIME);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					t++;
				}
				// mConfigBroadUdp.send(getBytes(content[i]));

				if (i != content.length) {
					try {
						Thread.sleep(CONTENT_PACKAGE_DELAY_TIME);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
			try {
				Thread.sleep(CONTENT_CHECKSUM_BEFORE_DELAY_TIME);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			// int checkLength = pwd.length() * 30 + 76;
			// JCTIP ver1
			int checkLength = pwd.length() + 256 + 76;

			// JCTIP ver2
			int t = 1;
			while (t <= 3 && isConnecting) {
				mConfigBroadUdp.send(getBytes(checkLength));
				if (t < 3) {
					try {
						Thread.sleep(CONTENT_PACKAGE_DELAY_TIME);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				t++;
			}
			// mConfigBroadUdp.send(getBytes(checkLength));

			try {
				Thread.sleep(CONTENT_GROUP_DELAY_TIME);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			count++;
		}
		Log.e(TAG, "connect END");
	}

	private byte[] getBytes(int capacity) {
		byte[] data = new byte[capacity];
		for (int i = 0; i < capacity; i++) {
			data[i] = 5;
		}
		return data;
	}

	public char byteToChar(byte[] b) {
		char c = (char) (((b[0] & 0xFF) << 8) | (b[1] & 0xFF));
		return c;
	}

	class ConfigUdpBroadcast {
		private InetAddress inetAddressbroadcast;
		private InetAddress inetAddressgateway;
		private DatagramSocket socket;
		private DatagramPacket packetToSendbroadcast;
		private DatagramPacket packetToSendgateway;
		private DatagramPacket dataPacket;
		private int port = 49999;
		private byte receiveByte[] = new byte[512];

		// private boolean receiveFlag = true;

		private ConfigUdpBroadcast() {
			try {
				// 255.255.255.255
				inetAddressbroadcast = InetAddress.getByName(broadCastIP);
			} catch (UnknownHostException e) {
				e.printStackTrace();
			}
		}

		public void open() {
			try {
				socket = new DatagramSocket(port);
				socket.setBroadcast(true);
			} catch (SocketException e) {
				e.printStackTrace();
			}
		}

		public void close() {
			if (socket != null) {
				socket.close();
			}
		}

		public void sendFindCmd() {
			// TODO Auto-generated method stub
			System.out.println("smartlinkfind");
			packetToSendbroadcast = new DatagramPacket(
					"smartlinkfind".getBytes(),
					"smartlinkfind".getBytes().length, inetAddressbroadcast,
					48899);
			try {
				socket.send(packetToSendbroadcast);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		public void send(byte[] data) {
			packetToSendbroadcast = new DatagramPacket(data, data.length,
					inetAddressbroadcast, port);
			try {
				socket.send(packetToSendbroadcast);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		public void receive() {
			dataPacket = new DatagramPacket(receiveByte, receiveByte.length);
			new Thread() {
				public void run() {
					while (isConnecting) {
						try {
							socket.receive(dataPacket);
							int len = dataPacket.getLength();
							if (len > 0) {
								String receiveStr = new String(receiveByte, 0,
										len, "UTF-8");

								if (receiveStr.contains(RET_KEY)) {
									ModuleInfo mi = new ModuleInfo();
									mi.setMac(receiveStr.replace(RET_KEY, "")
											.trim());
									mi.setModuleIP(dataPacket.getAddress());
									if(!successMacSet.contains(mi.getMac())){
										successMacSet.add(mi.getMac());
										callback.onConnect(mi);
									}
								}
							}
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			}.start();
		}

		public void stopReceive() {
			Log.e(TAG, "stopReceive");
			isConnecting = false;
		}
	}
}
